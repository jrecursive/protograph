
//
// protograph (under development)
//

//
// command list (so far)
//

CREATE      Create a named directed graph
            create <name>
            
USE         Select a named graph to use
            use <name>
            
DROP        Delete a named graph
            drop <name>
            
LISTG       List graphs

BYE         End session & disconnect

CVERT       Create a vertex
            cvert <key> <json_attrs>
            
CEDGE       Create an edge between two vertices
            cedge <key> <from_key> <to_key> <relation> <weight> <json_attrs>
            
EXISTS      Test to see if a vertex or edge exists by key
            exists <key>

GET         Get a JSON representation of a vertex or edge by key
            get <key>
            
SET         Set or clear an attribute of a vertex or edge by key
            set <key> <attr> <value>

            set v0 cost 250.00
            set e3 seats 65

DEL         Delete a vertex or edge by key
            del <key>
            
Q           Query attributes of vertices and edges by any field
            q <query>
            q distance:[2000 TO 3000] AND _type:edge
            q seats:[60 TO 70] AND _type:edge

INCW        Increment the weight of an edge by key
            incw <key> <amount>

            incw e1 154.0
            incw e2 405.0
            
SPATH       Find the shortest path between two vertices (with optional maximum path length)
            spath <from_key> <to_key> [radius]
            
            spath a m
            spath a m 5

            
KSPATH      Find the k-shortest paths between two vertices (with optional maximum path length)
            kspath <from_key> <to_key> <k> [radius]

            kspath v0 v3 6
            kspath v0 v3 2 5

HC          Find the hamiltonian cycle if it exists ("traveling salesman problem")

EC          Find the eulerian circuit if it exists
            
EKMF        Calculate Edmonds Karp maximum flow between two vertices
            ekmf <source_vertex_key> <target_vertex_key>
            
CN          Compute the chromatic number ("graph coloring")

KMST        Compute Kruskal's minimum spanning tree
            
            kmst
            {
                "edge_set": [
                    {
                        "data": {
                            "_fromVertex": "c",
                            "_rel": "private-flight-to",
                            "_toVertex": "d",
                            "_weight": "977.0",
                            "id": "e6",
                            "seats": 10
                        },
                        "rel": "private-flight-to",
                        "v1": {
                            "city": "chicago",
                            "id": "c"
                        },
                        "v2": {
                            "city": "austin",
                            "id": "d"
                        }
                    },
                    {
                        "data": {
                            "_fromVertex": "a",
                            "_rel": "private-flight-to",
                            "_toVertex": "c",
                            "_weight": "356.0",
                            "id": "e5",
                            "seats": 10
                        },
                        "rel": "private-flight-to",
                        "v1": {
                            "city": "minneapolis",
                            "id": "a"
                        },
                        "v2": {
                            "city": "chicago",
                            "id": "c"
                        }
                    },
                    {
                        "data": {
                            "_fromVertex": "a",
                            "_rel": "flight-to",
                            "_toVertex": "b",
                            "_weight": "155.0",
                            "id": "e1",
                            "seats": 50
                        },
                        "rel": "flight-to",
                        "v1": {
                            "city": "minneapolis",
                            "id": "a"
                        },
                        "v2": {
                            "city": "duluth",
                            "id": "b"
                        }
                    }
                ],
                "spanning_tree_cost": 1488
            }
            done

VCG         Compute vertex cover set (greedy method)

            vcg
            {"cover_set": [
                {
                    "city": "chicago",
                    "id": "c"
                },
                {
                    "city": "duluth",
                    "id": "b"
                },
                {
                    "city": "minneapolis",
                    "id": "a"
                }
            ]}
            done

VC2A        Compute vertex cover set (2-approximation method)

            vc2a
            {"cover_set": [
                {
                    "city": "austin",
                    "id": "d"
                },
                {
                    "city": "chicago",
                    "id": "c"
                },
                {
                    "city": "duluth",
                    "id": "b"
                },
                {
                    "city": "minneapolis",
                    "id": "a"
                }
            ]}
            done

CSETV       Compute the maximally connected set for a vertex
            csetv <key>
            
            csetv b
            {"connected_set": [
                {
                    "city": "austin",
                    "id": "d"
                },
                {
                    "city": "chicago",
                    "id": "c"
                },
                {
                    "city": "minneapolis",
                    "id": "a"
                },
                {
                    "city": "duluth",
                    "id": "b"
                }
            ]}
            done

CSETS       Compute all maximally connected sets
            
            csets
            {"connected_sets": [[
                {
                    "city": "austin",
                    "id": "d"
                },
                {
                    "city": "chicago",
                    "id": "c"
                },
                {
                    "city": "duluth",
                    "id": "b"
                },
                {
                    "city": "minneapolis",
                    "id": "a"
                }
            ]]}
            done


ISCON       Returns "true" if graph connected

            iscon
            true
            done


UPATHEX     Returns "true" if there exists any UNDIRECTED path between the two vertices specified
            upathex <vertex_0> <vertex_1>

            upathex c a
            true
            done


//
// more examples
//

[ ~]# telnet localhost 10101
Trying 127.0.0.1...
Connected to localhost (127.0.0.1).
Escape character is '^]'.
graphd localhost
create db
ok
use db
ok

/* create vertices & edges */

cvert a {"city":"minneapolis"} 
ok CMD_CVERT a
cvert b {"city":"boston"}
ok CMD_CVERT b
cvert c {"city":"atlanta"}
ok CMD_CVERT c
cvert d {"city":"chicago"}
ok CMD_CVERT d
cvert e {"city":"los angeles"}
ok CMD_CVERT e
cvert f {"city":"honolulu"}
ok CMD_CVERT f
cvert g {"city":"houston"}
ok CMD_CVERT g
cvert h {"city":"miami"}
ok CMD_CVERT h
cvert i {"city":"new york city"}
ok CMD_CVERT i
cedge e1 a b flight-to {"distance":2014}
ok CMD_CEDGE e1
cedge e2 a d flight-to {"distance":780} 
ok CMD_CEDGE e2
cedge e3 d e flight-to {"distance":2200}
ok CMD_CEDGE e3
cedge e4 e f flight-to {"distance":2600}
ok CMD_CEDGE e4
cedge e5 b i bus-route {"cost":46} 
ok CMD_CEDGE e5
cedge e6 d c flight-to {"cost":320} 
ok CMD_CEDGE e6
cedge e7 e c flight-to {"cost":199}
ok CMD_CEDGE e7
cedge e8 e g flight-to {"cost":169}
ok CMD_CEDGE e8
cedge e9 f g flight-to {"cost":349}
ok CMD_CEDGE e9
cedge e10 c e flight-to {"cost":299}
ok CMD_CEDGE e10
cedge e11 a e flight-to {"cost":399}
ok CMD_CEDGE e11
cedge e12 i j flight-to {"cost":2000}
ok CMD_CEDGE e12
cedge e13 j k flight-to {"cost":2000}
ok CMD_CEDGE e13
cedge e14 k m flight-to {"cost":2000}
ok CMD_CEDGE e14
cedge e15 i k flight-to {"cost":2000}
ok CMD_CEDGE e15
cedge e16 k m flight-to {"cost":2000}
ok CMD_CEDGE e16

/* shortest path (dijkstra) */

spath a b
{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'b','city':'boston'},"data":{"id":"e1","distance":2014},"rel":"flight-to"}
done

spath a c
{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'d','city':'chicago'},"data":{"id":"e2","distance":780},"rel":"flight-to"}
{"v1":{'id':'d','city':'chicago'},"v2":{'id':'c','city':'atlanta'},"data":{"id":"e6","cost":320},"rel":"flight-to"}
done

spath a e
{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'e','city':'los angeles'},"data":{"id":"e11","cost":399},"rel":"flight-to"}
done

/* query vertices & edges */

q cost:[200 400]
{"_type":"edge","_fromVertex":"d","_toVertex":"c","_weight":"1.0","_key":"e6","cost":"320","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"f","_toVertex":"g","_weight":"1.0","_key":"e9","cost":"349","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"c","_toVertex":"e","_weight":"1.0","_key":"e10","cost":"299","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"a","_toVertex":"e","_weight":"1.0","_key":"e11","cost":"399","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"i","_toVertex":"j","_weight":"1.0","_key":"e12","cost":"2000","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"j","_toVertex":"k","_weight":"1.0","_key":"e13","cost":"2000","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"k","_toVertex":"m","_weight":"1.0","_key":"e14","cost":"2000","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"i","_toVertex":"k","_weight":"1.0","_key":"e15","cost":"2000","_rel":"flight-to"}
{"_type":"edge","_fromVertex":"k","_toVertex":"m","_weight":"1.0","_key":"e16","cost":"2000","_rel":"flight-to"}
done

q city:hon*
{"_type":"vertex","_key":"f","city":"honolulu"}
{"_type":"vertex","_key":"l","city":"hong kong"}
done

/* k-shortest paths */

kspath a m 3
{"weight":4,"path":[{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'b','city':'boston'},"data":{"id":"e1","_toVertex":"b","_fromVertex":"a","distance":2014,"_weight":1,"_rel":"flight-to"},"rel":"flight-to"},{"v1":{'id':'b','city':'boston'},"v2":{'id':'i','city':'new york city'},"data":{"id":"e5","_toVertex":"i","_fromVertex":"b","_weight":1,"_rel":"bus-route","cost":46},"rel":"bus-route"},{"v1":{'id':'i','city':'new york city'},"v2":{'id':'k','city':'beijing'},"data":{"id":"e15","_toVertex":"k","_fromVertex":"i","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'k','city':'beijing'},"v2":{'id':'m','city':'auckland'},"data":{"id":"e14","_toVertex":"m","_fromVertex":"k","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"}]}
{"weight":5,"path":[{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'b','city':'boston'},"data":{"id":"e1","_toVertex":"b","_fromVertex":"a","distance":2014,"_weight":1,"_rel":"flight-to"},"rel":"flight-to"},{"v1":{'id':'b','city':'boston'},"v2":{'id':'i','city':'new york city'},"data":{"id":"e5","_toVertex":"i","_fromVertex":"b","_weight":1,"_rel":"bus-route","cost":46},"rel":"bus-route"},{"v1":{'id':'i','city':'new york city'},"v2":{'id':'j','city':'tokyo'},"data":{"id":"e12","_toVertex":"j","_fromVertex":"i","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'j','city':'tokyo'},"v2":{'id':'k','city':'beijing'},"data":{"id":"e13","_toVertex":"k","_fromVertex":"j","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'k','city':'beijing'},"v2":{'id':'m','city':'auckland'},"data":{"id":"e14","_toVertex":"m","_fromVertex":"k","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"}]}
done

/* dump attributes of a vertex or edge */

spy m
{
    "city": "auckland",
    "id": "m"
}
done

spy e15
{
    "data": {
        "_fromVertex": "i",
        "_rel": "flight-to",
        "_toVertex": "k",
        "_weight": 1,
        "cost": 2000,
        "id": "e15"
    },
    "rel": "flight-to",
    "v1": {
        "city": "new york city",
        "id": "i"
    },
    "v2": {
        "city": "beijing",
        "id": "k"
    }
}
done

/* set attributes & weights */

set e15 _weight 2.5
done

/* shortest path changes with changed weight */

kspath a m 3
{"weight":5,"path":[{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'b','city':'boston'},"data":{"id":"e1","_toVertex":"b","_fromVertex":"a","distance":2014,"_weight":1,"_rel":"flight-to"},"rel":"flight-to"},{"v1":{'id':'b','city':'boston'},"v2":{'id':'i','city':'new york city'},"data":{"id":"e5","_toVertex":"i","_fromVertex":"b","_weight":1,"_rel":"bus-route","cost":46},"rel":"bus-route"},{"v1":{'id':'i','city':'new york city'},"v2":{'id':'j','city':'tokyo'},"data":{"id":"e12","_toVertex":"j","_fromVertex":"i","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'j','city':'tokyo'},"v2":{'id':'k','city':'beijing'},"data":{"id":"e13","_toVertex":"k","_fromVertex":"j","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'k','city':'beijing'},"v2":{'id':'m','city':'auckland'},"data":{"id":"e14","_toVertex":"m","_fromVertex":"k","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"}]}
{"weight":5.5,"path":[{"v1":{'id':'a','city':'minneapolis'},"v2":{'id':'b','city':'boston'},"data":{"id":"e1","_toVertex":"b","_fromVertex":"a","distance":2014,"_weight":1,"_rel":"flight-to"},"rel":"flight-to"},{"v1":{'id':'b','city':'boston'},"v2":{'id':'i','city':'new york city'},"data":{"id":"e5","_toVertex":"i","_fromVertex":"b","_weight":1,"_rel":"bus-route","cost":46},"rel":"bus-route"},{"v1":{'id':'i','city':'new york city'},"v2":{'id':'k','city':'beijing'},"data":{"id":"e15","_toVertex":"k","_fromVertex":"i","_weight":"2.5","_rel":"flight-to","cost":2000},"rel":"flight-to"},{"v1":{'id':'k','city':'beijing'},"v2":{'id':'m','city':'auckland'},"data":{"id":"e14","_toVertex":"m","_fromVertex":"k","_weight":1,"_rel":"flight-to","cost":2000},"rel":"flight-to"}]}
done

-----

create db4
use db4
cvert a {"city":"minneapolis"} 
ok CMD_CVERT a
cvert b {"city":"duluth"}
ok CMD_CVERT b
cvert c {"city":"chicago"}
ok CMD_CVERT c
cedge e1 a b flight-to {"cost": 1000}
ok CMD_CEDGE e1
cedge e2 b c flight-to {"cost": 1000}
ok CMD_CEDGE e2
cedge e3 a c flight-to {"cost": 1000}
ok CMD_CEDGE e3

/* hamiltonian cycle */

hc
{'id':'c','city':'chicago'}
{'id':'b','city':'duluth'}
{'id':'a','city':'minneapolis'}
done

set e2 _weight 5.0
done

spy e2
{
    "data": {
        "_fromVertex": "b",
        "_rel": "flight-to",
        "_toVertex": "c",
        "_weight": "5.0",
        "cost": 1000,
        "id": "e2"
    },
    "rel": "flight-to",
    "v1": {
        "city": "duluth",
        "id": "b"
    },
    "v2": {
        "city": "chicago",
        "id": "c"
    }
}
done

hc
{'id':'b','city':'duluth'}
{'id':'c','city':'chicago'}
{'id':'a','city':'minneapolis'}
done

------

create db4
use db4
cvert a {"city":"minneapolis"} 
ok CMD_CVERT a
cvert b {"city":"duluth"}
ok CMD_CVERT b
cvert c {"city":"chicago"}
ok CMD_CVERT c
cedge e1 a b flight-to {}
ok CMD_CEDGE e1
cedge e2 b c flight-to {}
ok CMD_CEDGE e2
cedge e3 a c flight-to {}
ok CMD_CEDGE e3

/* eulerian circuit */

ec
{'id':'a','city':'minneapolis'}
{'id':'c','city':'chicago'}
{'id':'b','city':'duluth'}
{'id':'a','city':'minneapolis'}
done

------

// omitting the "ok" replies for brevity ... 

create db5
use db5
cvert a {"city":"minneapolis"} 
cvert b {"city":"duluth"}
cvert c {"city":"chicago"}
cvert d {"city":"austin"}
cvert e {"city":"chicago"}
cvert f {"city":"milwaukee"}
cedge e1 a b flight-to {}
cedge e2 b c flight-to {}
cedge e3 b d flight-to {}
cedge e4 c e flight-to {}
cedge e5 d e flight-to {}
cedge e5 d f flight-to {}
cedge e6 f a flight-to {}
cedge e7 e b flight-to {}
cedge e8 d b flight-to {}
cedge e9 c a bus-to {}
set e1 _weight 2.0
set e2 _weight 3.0
set e3 _weight 0.5
set e4 _weight 6.3
set e5 _weight 10.0
set e6 _weight 2.3
set e7 _weight 9.3
set e8 _weight 11.1
set e9 _weight 1.982

/* edmonds-karp maximum flow */

ekmf a f
{
    "maximum_flow": {
        "flight-to": 0.5,
        "flight-to": 0,
        "bus-to": 0,
        "flight-to": 0.5,
        "flight-to": 0,
        "flight-to": 0,
        "flight-to": 0,
        "flight-to": 0,
        "flight-to": 0.5,
        "flight-to": 0
    },
    "maximum_flow_value": 0.5
}
done

------

/* more to come :) */

