
* basics

listg
create test
use test
cvert MSP {"type":"intl"}
cvert DLT {"type":"regional"}
cvert XYZ {"type":"intl"}
cedge MSP-TO-DLT MSP DLT flight-to 350 {"cost":99}
cedge DLT-TO-XYZ DLT XYZ puddle-jump-to 160 {"cost":99}
cedge XYZ-TO-MSP XYZ MSP flight-to 420 {"cost":259}
gstat test
spath MSP XYZ
ec
hc
get <<cost:[200 TO 300]>>

* flights (slightly more interesting data)

use flights
gstat flights
cn
fbmc
get MEX
spath WAW SAW
kspath WAW SAW 5 8
get <<location:usa location:ca>>
get <<location:mexico>>
get <<name:"kuala lumpur">>
spath <<location:usa location:ca>> <<location:mexico>>

* channels and traversals

cchan traversal1
subscribe traversal1
trav WAW closest_first:5 - traversal1
trav FRA breadth_first - traversal1
trav MEX depth_first - traversal1
trav VIE topological - traversal1
trav <<location:usa location:ca>> closest_first:50 - traversal1

* server-side traversals using UDFs

define_udf TestJSTraversal js udfs/js/TestJSTraversal.js
trav <<location:poland>> closest_first:5 TestJSTraversal
trav <<location:poland>> closest_first:5 - traversal1

* back to graph "test": "bound" processes: 

use test
define_udf TestJSGraphProcess js udfs/js/TestJSGraphProcess.js
cchan test_endpoint
subscribe test_endpoint
sproc <<_type:v>> TestJSGraphProcess
emit MSP MSP-TestJSGraphProcess {}

* categories: dynamic attributes & different traversals

use categories
cchan c1
subscribe c1
define_udf TestJSTraversal js udfs/js/TestJSTraversal.js
trav <<_key:beauty*>> closest_first:5 TestJSTraversal
spath root <<_key:beauty* _type:v>>
set <<_key:*salon* _type:v>> service_type beauty
set <<_key:*beauty* _type:v>> service_type beauty
set <<_key:*hair* _type:v -_key:*wheel* -_key:*chair*>> service_type beauty
spath root <<service_type:beauty>>
gstat categories
fbmc





//

create logic
use logic
cvert rlvg1 {}
cvert rlvg2 {}
cvert and1 {}
cvert lsl1 {}
cedge rlvg1-to-and1 rlvg1 and1 signal 0 {}
cedge rlvg2-to-and1 rlvg2 and1 signal 0 {}
cedge and1-to-lsl1 and1 lsl1 signal 0 {}
cedge lsl1-to-rlvg1 lsl1 rlvg1 signal 0 {}
cedge lsl1-to-rlvg2 lsl1 rlvg2 signal 0 {}
define_udf RandomLogicValueGenerator js udfs/js/RandomLogicValueGenerator.js
define_udf ANDProcess js udfs/js/ANDProcess.js
define_udf LogicStateLogger js udfs/js/LogicStateLogger.js
sproc rlvg1 RandomLogicValueGenerator
sproc rlvg2 RandomLogicValueGenerator
sproc and1 ANDProcess
sproc lsl1 LogicStateLogger
emit rlvg1 rlvg1-RandomLogicValueGenerator {"type":"clock"}
emit rlvg2 rlvg2-RandomLogicValueGenerator {"type":"clock"}
emit and1 and1-ANDProcess {"type":"clock"}




